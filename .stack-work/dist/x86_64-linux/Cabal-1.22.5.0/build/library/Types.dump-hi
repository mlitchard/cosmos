
==================== FINAL INTERFACE ====================
2016-05-18 22:46:29.469124 UTC

interface cosmo_1iqUX5FQjOsHFaPsFk56bu:Types 7103
  interface hash: f0e56bafe36fcf680cb1ed47547edca7
  ABI hash: e742b131582f384f31003bd64911d8e5
  export-list hash: 346fa2053aebaf7d1c739e2ece90f2ff
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e7e278891c0cdfbc26545eb0ece83ab2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.Actor
  Types.Adjective
  Types.Determiner
  Types.Noun
  Types.NounPhrase{Types.Type1_NP Types.Type2_NP Types.Type3_NP}
  Types.PrepPhrase{Types.PrepPhrase}
  Types.Preposition
  Types.Sentence{Types.Type1_S Types.Type2_S}
  Types.SentenceFragment{Types.Type1_SF Types.Type2_SF}
  Types.Verb
  Types.VerbPhrase{Types.Verb Types.VerbPhrase}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
aac0192c5ab8bce523960be662ce8010
  $fShowNounPhrase :: GHC.Show.Show Types.NounPhrase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.NounPhrase
                  Types.$fShowNounPhrase_$cshowsPrec
                  Types.$fShowNounPhrase_$cshow
                  Types.$fShowNounPhrase_$cshowList -}
aac0192c5ab8bce523960be662ce8010
  $fShowNounPhrase1 :: Types.NounPhrase -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Types.NounPhrase w1 :: GHC.Base.String ->
                 Types.$w$cshowsPrec 0 w w1) -}
aac0192c5ab8bce523960be662ce8010
  $fShowNounPhrase_$cshow :: Types.NounPhrase -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.NounPhrase ->
                 Types.$fShowNounPhrase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
aac0192c5ab8bce523960be662ce8010
  $fShowNounPhrase_$cshowList :: [Types.NounPhrase] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.NounPhrase
                   Types.$fShowNounPhrase1) -}
aac0192c5ab8bce523960be662ce8010
  $fShowNounPhrase_$cshowsPrec ::
    GHC.Types.Int -> Types.NounPhrase -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Types.NounPhrase
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec ww1 w1 w2 }) -}
0fed9279e7853f76dd2430f5caff3822
  $fShowPrepPhrase :: GHC.Show.Show Types.PrepPhrase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.PrepPhrase
                  Types.$fShowPrepPhrase_$cshowsPrec
                  Types.$fShowPrepPhrase_$cshow
                  Types.$fShowPrepPhrase_$cshowList -}
0fed9279e7853f76dd2430f5caff3822
  $fShowPrepPhrase1 :: Types.PrepPhrase -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Types.PrepPhrase w1 :: GHC.Base.String ->
                 case w of ww { Types.PrepPhrase ww1 ww2 ->
                 Types.$w$cshowsPrec1 0 ww1 ww2 w1 }) -}
7173c4b1956e7e3295b3f819c3e3b0a5
  $fShowPrepPhrase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrepPhrase "#) -}
0fed9279e7853f76dd2430f5caff3822
  $fShowPrepPhrase_$cshow :: Types.PrepPhrase -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.PrepPhrase ->
                 Types.$fShowPrepPhrase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0fed9279e7853f76dd2430f5caff3822
  $fShowPrepPhrase_$cshowList :: [Types.PrepPhrase] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.PrepPhrase
                   Types.$fShowPrepPhrase1) -}
0fed9279e7853f76dd2430f5caff3822
  $fShowPrepPhrase_$cshowsPrec ::
    GHC.Types.Int -> Types.PrepPhrase -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Types.PrepPhrase
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.PrepPhrase ww3 ww4 ->
                 Types.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
61fecad3a1c76268132d99b8abff4ebe
  $fShowSentence :: GHC.Show.Show Types.Sentence
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Sentence
                  Types.$fShowSentence_$cshowsPrec
                  Types.$fShowSentence_$cshow
                  Types.$fShowSentence_$cshowList -}
61fecad3a1c76268132d99b8abff4ebe
  $fShowSentence1 :: Types.Sentence -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Types.Sentence w1 :: GHC.Base.String ->
                 Types.$w$cshowsPrec2 0 w w1) -}
7e05971499e57b7b85b41b3e52b84f2d
  $fShowSentence2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type2_S "#) -}
d633a68737d078f54c77eeec3962b2e0
  $fShowSentence3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type1_S "#) -}
4d98fed83b5f2f6a24ac92a06ca31d37
  $fShowSentence4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type2_SF "#) -}
0e32422e44553067bad7215316f99081
  $fShowSentence5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type1_SF "#) -}
f5b8a0977db3fda1c5594ee074288fb4
  $fShowSentence6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb "#) -}
f877aa0ba56e4702487f9ec237bf0adf
  $fShowSentence7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbPhrase "#) -}
6a254a7655e82be36748a51a60eb9b55
  $fShowSentenceFragment :: GHC.Show.Show Types.SentenceFragment
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.SentenceFragment
                  Types.$fShowSentenceFragment_$cshowsPrec
                  Types.$fShowSentenceFragment_$cshow
                  Types.$fShowSentenceFragment_$cshowList -}
6a254a7655e82be36748a51a60eb9b55
  $fShowSentenceFragment1 :: Types.SentenceFragment -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Types.SentenceFragment w1 :: GHC.Base.String ->
                 Types.$w$cshowsPrec3 0 w w1) -}
6a254a7655e82be36748a51a60eb9b55
  $fShowSentenceFragment_$cshow ::
    Types.SentenceFragment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.SentenceFragment ->
                 Types.$fShowSentenceFragment_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a254a7655e82be36748a51a60eb9b55
  $fShowSentenceFragment_$cshowList ::
    [Types.SentenceFragment] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.SentenceFragment
                   Types.$fShowSentenceFragment1) -}
6a254a7655e82be36748a51a60eb9b55
  $fShowSentenceFragment_$cshowsPrec ::
    GHC.Types.Int -> Types.SentenceFragment -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Types.SentenceFragment
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 w2 }) -}
61fecad3a1c76268132d99b8abff4ebe
  $fShowSentence_$cshow :: Types.Sentence -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Sentence ->
                 Types.$fShowSentence_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
61fecad3a1c76268132d99b8abff4ebe
  $fShowSentence_$cshowList :: [Types.Sentence] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Sentence
                   Types.$fShowSentence1) -}
61fecad3a1c76268132d99b8abff4ebe
  $fShowSentence_$cshowsPrec ::
    GHC.Types.Int -> Types.Sentence -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Types.Sentence w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 w2 }) -}
afce52f52b29546cdcb85ce4f63973d0
  $fShowVerbPhrase :: GHC.Show.Show Types.VerbPhrase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.VerbPhrase
                  Types.$fShowVerbPhrase_$cshowsPrec
                  Types.$fShowVerbPhrase_$cshow
                  Types.$fShowVerbPhrase_$cshowList -}
afce52f52b29546cdcb85ce4f63973d0
  $fShowVerbPhrase1 :: Types.VerbPhrase -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Types.VerbPhrase w1 :: GHC.Base.String ->
                 Types.$w$cshowsPrec4 0 w w1) -}
afce52f52b29546cdcb85ce4f63973d0
  $fShowVerbPhrase_$cshow :: Types.VerbPhrase -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.VerbPhrase ->
                 Types.$fShowVerbPhrase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
afce52f52b29546cdcb85ce4f63973d0
  $fShowVerbPhrase_$cshowList :: [Types.VerbPhrase] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.VerbPhrase
                   Types.$fShowVerbPhrase1) -}
afce52f52b29546cdcb85ce4f63973d0
  $fShowVerbPhrase_$cshowsPrec ::
    GHC.Types.Int -> Types.VerbPhrase -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Types.VerbPhrase
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec4 ww1 w1 w2 }) -}
aac0192c5ab8bce523960be662ce8010
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.NounPhrase -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
09097c2309cf208b107e027728f005ac
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Types.Preposition
    -> Types.NounPhrase
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Types.Preposition
                   ww2 :: Types.NounPhrase
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowPrepPhrase2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (Types.$w$cshowsPrec 11 ww2 x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
61fecad3a1c76268132d99b8abff4ebe
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Types.Sentence -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Types.Sentence
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Types.Type1_S b1 b2
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          Types.$w$cshowsPrec4
                            11
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Types.$w$cshowsPrec3 11 b2 x))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Types.$fShowSentence3 (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowSentence3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Types.Type2_S b1 b2 b3
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSentence2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (Types.$w$cshowsPrec4
                                           11
                                           b2
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (Types.$w$cshowsPrec3 11 b3 x)))))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) } }) -}
6a254a7655e82be36748a51a60eb9b55
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.SentenceFragment -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Types.SentenceFragment
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Types.Type1_SF b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowSentence5
                             (Types.$w$cshowsPrec 11 b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowSentence5
                                (Types.$w$cshowsPrec
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Types.Type2_SF b1 b2
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          case b1 of ww1 { Types.PrepPhrase ww2 ww3 ->
                          Types.$w$cshowsPrec1
                            11
                            ww2
                            ww3
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Types.$w$cshowsPrec 11 b2 x)) }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Types.$fShowSentence4 (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowSentence4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
afce52f52b29546cdcb85ce4f63973d0
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.VerbPhrase -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Types.VerbPhrase
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Types.VerbPhrase b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSentence7
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (Types.$w$cshowsPrec 11 b2 x)))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }
                   Types.Verb b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowSentence6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowSentence6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            w1))))) } }) -}
661a2f3dd209c60cd1b183f8cc10f7dc
  type Actor = GHC.Base.String
ea95594f3e513ec5bddb63fcf7669641
  type Adjective = GHC.Base.String
2b3d0b0303b1c8f35f6a2243728bf7c9
  type Determiner = GHC.Base.String
5262e021e2da96f16ba66b3466493e2e
  type Noun = GHC.Base.String
aac0192c5ab8bce523960be662ce8010
  data NounPhrase
    = Type1_NP Types.Determiner Types.NounPhrase
    | Type2_NP Types.Adjective Types.NounPhrase
    | Type3_NP Types.Noun
0fed9279e7853f76dd2430f5caff3822
  data PrepPhrase = PrepPhrase Types.Preposition Types.NounPhrase
bfbf4397d0f59174a2ebff7a60c1b8f3
  type Preposition = GHC.Base.String
61fecad3a1c76268132d99b8abff4ebe
  data Sentence
    = Type1_S Types.VerbPhrase Types.SentenceFragment
    | Type2_S Types.Actor Types.VerbPhrase Types.SentenceFragment
6a254a7655e82be36748a51a60eb9b55
  data SentenceFragment
    = Type1_SF Types.NounPhrase
    | Type2_SF Types.PrepPhrase Types.NounPhrase
796ecd5b36f7a1b5ee3259558e6a60a9
  type Verb = GHC.Base.String
afce52f52b29546cdcb85ce4f63973d0
  data VerbPhrase
    = VerbPhrase Types.Verb Types.NounPhrase | Verb Types.Verb
instance GHC.Show.Show [Types.NounPhrase] = Types.$fShowNounPhrase
instance GHC.Show.Show [Types.PrepPhrase] = Types.$fShowPrepPhrase
instance GHC.Show.Show [Types.Sentence] = Types.$fShowSentence
instance GHC.Show.Show [Types.SentenceFragment]
  = Types.$fShowSentenceFragment
instance GHC.Show.Show [Types.VerbPhrase] = Types.$fShowVerbPhrase
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

