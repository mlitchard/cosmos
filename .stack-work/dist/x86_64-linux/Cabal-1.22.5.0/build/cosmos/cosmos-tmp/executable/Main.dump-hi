
==================== FINAL INTERFACE ====================
2016-05-18 22:58:09.618464 UTC

interface main@main:Main 7103
  interface hash: 9facc6cfde521f38ef209d248893791c
  ABI hash: 4213c2c79a779c4895b167f4d72ebe33
  export-list hash: 0d57c33bbb9cd25133a0c9802f56dffb
  orphan hash: 729cf090ab17a3419a1176eda90c9bd5
  flag hash: 7563b85932ac0c918259e30e709cf9ad
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: Earley-0.10.1.0@Earle_En8e3fk2Z8E6SsXputSFYw
                      ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cosmos-0.0.0@cosmo_1iqUX5FQjOsHFaPsFk56bu
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      fmlist-0.9@fmlis_3yq5KS8Cdzw1gCMj5FSS4u ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      semigroups-0.18.0.1@semig_7B7U5h9acISEZT3vUdd66v
                      tagged-0.8.2@tagge_LsPQD6UphhxLXSI5S11irM
                      text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.DList
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.FMList
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Instances
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Text.Text
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Text.TextLazy
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Vector.Storable
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Vector.Unboxed
         ListLike-4.2.1@ListL_HAj7xV7Dp61GCoedJwTyx3:Data.ListLike.Vector.Vector
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD:Data.Hashable.Generic
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         semigroups-0.18.0.1@semig_7B7U5h9acISEZT3vUdd66v:Data.List.NonEmpty
                         semigroups-0.18.0.1@semig_7B7U5h9acISEZT3vUdd66v:Data.Semigroup
                         tagged-0.8.2@tagge_LsPQD6UphhxLXSI5S11irM:Data.Tagged
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE:Data.HashSet
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  Earley-0.10.1.0@Earle_En8e3fk2Z8E6SsXputSFYw:Text.Earley 32535e32fbcf5bc791a72ce064131f8d
import  -/  Earley-0.10.1.0@Earle_En8e3fk2Z8E6SsXputSFYw:Text.Earley.Internal 8d83fd5df48d60311eb47e0778e7939c
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  cosmos-0.0.0@cosmo_1iqUX5FQjOsHFaPsFk56bu:Data 10cb9131eb007fc627034da79a3d8b70
import  -/  cosmos-0.0.0@cosmo_1iqUX5FQjOsHFaPsFk56bu:Recognizer 303cba6540878256e4f6f919fddecb96
import  -/  cosmos-0.0.0@cosmo_1iqUX5FQjOsHFaPsFk56bu:Types.Parser.Types d7a673792fd73894194715ce573dc435
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
a3be27b3a79a1a4e06eb1218861a7ef6
  $s$fListLike[]a ::
    Data.ListLike.Base.ListLike [[GHC.Types.Char]] [GHC.Types.Char]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  @ [GHC.Types.Char]
                  (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                  (GHC.Base.$fMonoid[] @ [GHC.Types.Char])
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cempty
                  Main.$s$fListLike[]a10
                  Main.$s$fListLike[]a_$s$fListLike[]a_$ccons
                  Main.$s$fListLike[]a9
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cappend
                  Main.$s$fListLike[]a_$s$fListLike[]a_$chead
                  Main.$s$fListLike[]a_$s$fListLike[]a_$clast
                  Main.$s$fListLike[]a_$s$fListLike[]a_$ctail
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cinit
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cnull
                  Main.$s$fListLike[]a8
                  Main.$s$fListLike[]a7
                  Main.$s$fListLike[]a_$s$fListLike[]a_$crigidMap
                  Main.$s$fListLike[]a_$s$fListLike[]a_$creverse
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cintersperse
                  (Data.ListLike.Base.$fListLike[]a_$cconcat
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cconcatMap
                  Main.$s$fListLike[]a_$s$fListLike[]a_$crigidConcatMap
                  (Data.ListLike.Base.$fListLike[]a_$cany
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$call
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cmaximum
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cminimum
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$creplicate
                  Main.$s$fListLike[]a6
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cdrop
                  Main.$s$fListLike[]a_$s$fListLike[]a_$csplitAt
                  Main.$s$fListLike[]a_$s$fListLike[]a_$ctakeWhile
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cdropWhile
                  (Data.ListLike.Base.$fListLike[]a_$cdropWhileEnd
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cspan
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cbreak
                  Main.$s$fListLike[]a5
                  Main.$s$fListLike[]a4
                  (Data.ListLike.Base.$fListLike[]a_$ctails
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cisPrefixOf
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cisSuffixOf
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cisInfixOf
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$celem
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cnotElem
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cfind
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cfilter
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cpartition
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cindex
                  (Data.ListLike.Base.$dmfindIndex_$celemIndex
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$celemIndices
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cfindIndex
                  (Data.ListLike.Base.$fListLike[]a_$cfindIndices
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$csequence
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cmapM
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$crigidMapM
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cnub
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cdelete
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cdeleteFirsts
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cunion
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cintersect
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$csort
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$dmfindIndex_$cinsert
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a3
                  Main.$s$fListLike[]a3
                  Main.$s$fListLike[]a2
                  (Data.ListLike.Base.$fListLike[]a_$cnubBy
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cdeleteBy
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cdeleteFirstsBy
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cunionBy
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cintersectBy
                  Main.$s$fListLike[]a1
                  Main.$s$fListLike[]a_$s$fListLike[]a_$csortBy
                  (Data.ListLike.Base.$fListLike[]a_$cinsertBy
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  Main.$s$fListLike[]a_$s$fListLike[]a_$cgenericLength
                  (Data.ListLike.Base.$fListLike[]a_$cgenericTake
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cgenericDrop
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cgenericSplitAt
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char]))
                  (Data.ListLike.Base.$fListLike[]a_$cgenericReplicate
                     @ [GHC.Types.Char]
                     (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                     (GHC.Base.$fMonoid[] @ [GHC.Types.Char])) -}
f74196685ce0a64e542705cbe6070775
  $s$fListLike[]a1 ::
    (Data.ListLike.Base.ListLike full' [[GHC.Types.Char]],
     GHC.Classes.Eq [GHC.Types.Char]) =>
    ([GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> full'
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLC(S)LLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A><L,C(C(U))><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ full'
                   $dListLike :: Data.ListLike.Base.ListLike full' [[GHC.Types.Char]]
                   $dEq :: GHC.Classes.Eq [GHC.Types.Char]
                   func :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool
                   eta :: [[GHC.Types.Char]] ->
                 Data.ListLike.Base.fromList
                   @ full'
                   @ [[GHC.Types.Char]]
                   $dListLike
                   (Data.OldList.groupBy @ [GHC.Types.Char] func eta)) -}
dde94c80bb829e888d1f6a8c62c5fbb1
  $s$fListLike[]a10 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GHC.Types.Char] ->
                 GHC.Types.:
                   @ [GHC.Types.Char]
                   x
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
201c741b7c5ada9053ccdeb70c340186
  $s$fListLike[]a2 ::
    Data.ListLike.Base.ListLike full' [GHC.Types.Char] =>
    [[GHC.Types.Char]] -> full'
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLC(S)LLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ full'
                   $dListLike :: Data.ListLike.Base.ListLike full' [GHC.Types.Char]
                   eta :: [[GHC.Types.Char]] ->
                 Data.ListLike.Base.fromList
                   @ full'
                   @ [GHC.Types.Char]
                   $dListLike
                   (GHC.Base.build
                      @ [GHC.Types.Char]
                      (\ @ b1
                         c :: [GHC.Types.Char] -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ [GHC.Types.Char]
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            (GHC.Base.id @ [GHC.Types.Char]))
                         n
                         eta))) -}
cf02f53ae88c0cb279f29362c26b1ce1
  $s$fListLike[]a3 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ eta :: [[GHC.Types.Char]] -> eta) -}
3260da55df7e966e489f866e659eb7fd
  $s$fListLike[]a4 ::
    Data.ListLike.Base.ListLike full' [[GHC.Types.Char]] =>
    [[GHC.Types.Char]] -> full'
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLC(S)LLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ full'
                   $dListLike :: Data.ListLike.Base.ListLike full' [[GHC.Types.Char]]
                   eta :: [[GHC.Types.Char]] ->
                 Data.ListLike.Base.fromList
                   @ full'
                   @ [[GHC.Types.Char]]
                   $dListLike
                   (Data.OldList.inits @ [GHC.Types.Char] eta)) -}
851c390b69c22da4b53c261b9c5526e8
  $s$fListLike[]a5 ::
    (Data.ListLike.Base.ListLike full' [[GHC.Types.Char]],
     GHC.Classes.Eq [GHC.Types.Char]) =>
    [[GHC.Types.Char]] -> full'
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLC(S)LLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ full'
                   $dListLike :: Data.ListLike.Base.ListLike full' [[GHC.Types.Char]]
                   $dEq :: GHC.Classes.Eq [GHC.Types.Char]
                   eta :: [[GHC.Types.Char]] ->
                 Data.ListLike.Base.fromList
                   @ full'
                   @ [[GHC.Types.Char]]
                   $dListLike
                   (Data.OldList.groupBy @ [GHC.Types.Char] GHC.Base.eqString eta)) -}
e2261aee6b94b3b0bf118eb821d1da95
  $s$fListLike[]a6 ::
    GHC.Types.Int -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Int eta1 :: [[GHC.Types.Char]] ->
                 case eta of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> GHC.Types.[] @ [GHC.Types.Char]
                   GHC.Types.True
                   -> GHC.List.$wunsafeTake @ [GHC.Types.Char] y eta1 } }) -}
a691bc8e6335e27332579dd8de85f3e4
  $s$fListLike[]a7 ::
    Data.ListLike.Base.ListLike full' item' =>
    ([GHC.Types.Char] -> item') -> [[GHC.Types.Char]] -> full'
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLC(S)LLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ item'
                   @ full'
                   $dListLike :: Data.ListLike.Base.ListLike full' item'
                   f :: [GHC.Types.Char] -> item'
                   eta :: [[GHC.Types.Char]] ->
                 Data.ListLike.Base.fromList
                   @ full'
                   @ item'
                   $dListLike
                   (GHC.Base.build
                      @ item'
                      (\ @ b1 c :: item' -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB @ item' @ b1 @ [GHC.Types.Char] c f)
                         n
                         eta))) -}
815b620894f9b826434d1afef9dde934
  $s$fListLike[]a8 :: [[GHC.Types.Char]] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [[GHC.Types.Char]] ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] eta 0 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
f550e57995b2256abd21f3801f3a150d
  $s$fListLike[]a9 ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ l :: [[GHC.Types.Char]] x :: [GHC.Types.Char] ->
                 GHC.Base.augment
                   @ [GHC.Types.Char]
                   (\ @ b c :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ [GHC.Types.Char] @ b c n l)
                   (GHC.Types.:
                      @ [GHC.Types.Char]
                      x
                      (GHC.Types.[] @ [GHC.Types.Char]))) -}
308a7b8cb27a36074f526da88a685692
  $s$fListLike[]a_$s$fListLike[]a_$cappend ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ eta :: [[GHC.Types.Char]] eta1 :: [[GHC.Types.Char]] ->
                 GHC.Base.augment
                   @ [GHC.Types.Char]
                   (\ @ b c :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ [GHC.Types.Char] @ b c n eta)
                   eta1) -}
5d3b1894fcbffc44eb7f85ae3d84692d
  $s$fListLike[]a_$s$fListLike[]a_$cbreak ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> ([[GHC.Types.Char]], [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.break @ [GHC.Types.Char]) -}
cfc04b5bec74d414d83ffec25e22d0e5
  $s$fListLike[]a_$s$fListLike[]a_$cconcatMap ::
    Data.ListLike.Base.ListLike full' item' =>
    ([GHC.Types.Char] -> full') -> [[GHC.Types.Char]] -> full'
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ full'
                   @ item'
                   eta :: Data.ListLike.Base.ListLike full' item'
                   eta1 :: [GHC.Types.Char] -> full' ->
                 Data.ListLike.FoldableLL.foldMap
                   @ [GHC.Types.Char]
                   @ full'
                   @ [[GHC.Types.Char]]
                   (Data.ListLike.FoldableLL.$fFoldableLL[]a @ [GHC.Types.Char])
                   (Data.ListLike.Base.$p2ListLike @ full' @ item' eta)
                   eta1) -}
a4cf066fad806f23ac8e7d98ab1a88ca
  $s$fListLike[]a_$s$fListLike[]a_$ccons ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ [GHC.Types.Char]) -}
2b50d08b11bd993e0a89361c7e79d529
  $s$fListLike[]a_$s$fListLike[]a_$cdrop ::
    GHC.Types.Int -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.drop @ [GHC.Types.Char]) -}
a88df0c6afef3e7834a2ccb2c064b7fc
  $s$fListLike[]a_$s$fListLike[]a_$cdropWhile ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.dropWhile @ [GHC.Types.Char]) -}
dfdcaf0c39df67abfb170f4a674701f1
  $s$fListLike[]a_$s$fListLike[]a_$cempty :: [[GHC.Types.Char]]
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.[] @ [GHC.Types.Char]) -}
388127caa4b1bf5cf046b5aeb20f7d50
  $s$fListLike[]a_$s$fListLike[]a_$cfilter ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ eta :: [GHC.Types.Char] -> GHC.Types.Bool
                   eta1 :: [[GHC.Types.Char]] ->
                 GHC.Base.build
                   @ [GHC.Types.Char]
                   (\ @ b c :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b
                      (GHC.List.filterFB @ [GHC.Types.Char] @ b c eta)
                      n
                      eta1)) -}
e5d454c3f70b98e20dcc018f3779fd17
  $s$fListLike[]a_$s$fListLike[]a_$cfind ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> GHC.Base.Maybe [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.ListLike.Base.$fListLike[]a3 @ [GHC.Types.Char]) -}
e4a31be70733c6136c8acc51e57f9991
  $s$fListLike[]a_$s$fListLike[]a_$cfindIndex ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.findIndex @ [GHC.Types.Char]) -}
0d8560218cfb856cb97c0c5b4d71a240
  $s$fListLike[]a_$s$fListLike[]a_$cgenericLength ::
    GHC.Num.Num a1 => [[GHC.Types.Char]] -> a1
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.genericLength @ [GHC.Types.Char]) -}
bcc64aaf2e496f4d744374f2e1c04143
  $s$fListLike[]a_$s$fListLike[]a_$chead ::
    [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.head @ [GHC.Types.Char]) -}
d3df9189e973bfcb99cfe60a784b9b5e
  $s$fListLike[]a_$s$fListLike[]a_$cindex ::
    [[GHC.Types.Char]] -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.!! @ [GHC.Types.Char]) -}
b1e9d917d71b2329489e9633094085bb
  $s$fListLike[]a_$s$fListLike[]a_$cinit ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.init @ [GHC.Types.Char]) -}
4835add9d1de8ec024e08da485157506
  $s$fListLike[]a_$s$fListLike[]a_$cintersectBy ::
    ([GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.intersectBy @ [GHC.Types.Char]) -}
29f2ac957d04b8395fbd296d5d59fa4e
  $s$fListLike[]a_$s$fListLike[]a_$cintersperse ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.intersperse @ [GHC.Types.Char]) -}
67cc22a548ddff7da20954c66f74568a
  $s$fListLike[]a_$s$fListLike[]a_$clast ::
    [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.last @ [GHC.Types.Char]) -}
329b46b569e6824bc6d27c3cff7cd880
  $s$fListLike[]a_$s$fListLike[]a_$cnull ::
    [[GHC.Types.Char]] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.null @ [GHC.Types.Char]) -}
842020ee3ea57f4b05cb43b3b000af7f
  $s$fListLike[]a_$s$fListLike[]a_$cpartition ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> ([[GHC.Types.Char]], [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.partition @ [GHC.Types.Char]) -}
0f98349e6ef0730c138f7396b2d16024
  $s$fListLike[]a_$s$fListLike[]a_$creplicate ::
    GHC.Types.Int -> [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.replicate @ [GHC.Types.Char]) -}
62a712238dda59ecbc92366e1923dff4
  $s$fListLike[]a_$s$fListLike[]a_$creverse ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.reverse @ [GHC.Types.Char]) -}
30b46e7549d8b8dd38e77e503b741f27
  $s$fListLike[]a_$s$fListLike[]a_$crigidConcatMap ::
    ([GHC.Types.Char] -> [[GHC.Types.Char]])
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.ListLike.Base.$dmfindIndex_$sconcatMap
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]) -}
1e6e9989a0ac607b1622886111a8862f
  $s$fListLike[]a_$s$fListLike[]a_$crigidMap ::
    ([GHC.Types.Char] -> [GHC.Types.Char])
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ eta :: [GHC.Types.Char] -> [GHC.Types.Char]
                   eta1 :: [[GHC.Types.Char]] ->
                 GHC.Base.build
                   @ [GHC.Types.Char]
                   (\ @ b1
                      c :: [GHC.Types.Char] -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB @ [GHC.Types.Char] @ b1 @ [GHC.Types.Char] c eta)
                      n
                      eta1)) -}
e5d1a53ec03ac278d822ae73667fc03e
  $s$fListLike[]a_$s$fListLike[]a_$csortBy ::
    ([GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Ordering)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.sortBy @ [GHC.Types.Char]) -}
0d36b0bd3418ffb1dfe8a4fcd17909c5
  $s$fListLike[]a_$s$fListLike[]a_$cspan ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> ([[GHC.Types.Char]], [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.span @ [GHC.Types.Char]) -}
0f5be8959c6932801adaebaa9c652280
  $s$fListLike[]a_$s$fListLike[]a_$csplitAt ::
    GHC.Types.Int
    -> [[GHC.Types.Char]] -> ([[GHC.Types.Char]], [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.splitAt @ [GHC.Types.Char]) -}
a6ec57f6f942f3cc6703d94532f51e00
  $s$fListLike[]a_$s$fListLike[]a_$ctail ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.tail @ [GHC.Types.Char]) -}
dc02d4110e972e85bbb220460b099c1f
  $s$fListLike[]a_$s$fListLike[]a_$ctakeWhile ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ eta :: [GHC.Types.Char] -> GHC.Types.Bool
                   eta1 :: [[GHC.Types.Char]] ->
                 GHC.Base.build
                   @ [GHC.Types.Char]
                   (\ @ b c :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b
                      (GHC.List.takeWhileFB @ [GHC.Types.Char] @ b eta c n)
                      n
                      eta1)) -}
d8fe613afaaca1128c374bb2fe56d0c2
  $s$fListLike[]a_$s$fListLike[]a_$cunionBy ::
    ([GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool)
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.OldList.unionBy @ [GHC.Types.Char]) -}
66ca96e5770dbdf01650453951d9ea46
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3cb7b0e7836ae6f24319cd04f2724f25
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   eta) -}
25dd737f8adefa7880df0d38a8ed1f68
  main10 ::
    Text.Earley.Grammar.Prod
      (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence) e1 t1 a5
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Text.Earley.Grammar.Prod
            (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
            e1
            t1
            a5 #)
  {- Arity: 2,
     Unfolding: (\ @ s
                   @ e1
                   @ t1
                   @ a5
                   x :: Text.Earley.Grammar.Prod
                          (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence) e1 t1 a5
                   eta :: GHC.Prim.State# s[OneShot] ->
                 case Text.Earley.Internal.mkRule1
                        @ s
                        @ Types.Parser.Types.Sentence
                        @ e1
                        @ t1
                        @ a5
                        x
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of dt { Text.Earley.Internal.Rule ipv2 ipv3 ipv4 ->
                    Text.Earley.Grammar.NonTerminal
                      @ (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
                      @ e1
                      @ t1
                      @ a5
                      @ a5
                      dt
                      (Main.main11 @ s @ e1 @ t1 @ a5) } #) }) -}
3a95fd86409a7554ccecbaabb0a43754
  main11 ::
    Text.Earley.Grammar.Prod
      (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
      e1
      t1
      (a5 -> a5)
  {- HasNoCafRefs,
     Unfolding: (\ @ s @ e1 @ t1 @ a5 ->
                 Text.Earley.Grammar.Pure
                   @ (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
                   @ e1
                   @ t1
                   @ (a5 -> a5)
                   (GHC.Base.id @ a5)) -}
f418fb6ed67fe8f8692877cfda95808a
  main12 :: Control.Monad.Fix.MonadFix (GHC.ST.ST s)
  {- Unfolding: (\ @ s ->
                 Control.Monad.Fix.$fMonadFixST @ s (Main.main13 @ s)) -}
f10cd098a87b23cf2331d81054178533
  main13 :: GHC.Base.Monad (GHC.ST.ST s)
  {- Unfolding: (\ @ s -> GHC.ST.$fMonadST @ s (Main.main14 @ s)) -}
1671ec30aab848f7174b6c9df96fc707
  main14 :: GHC.Base.Applicative (GHC.ST.ST s)
  {- Unfolding: (\ @ s ->
                 GHC.ST.$fApplicativeST @ s (GHC.ST.$fFunctorST @ s)) -}
3d596e56e2ffb4eba9af80e7d40123c7
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
fbb5951a2a866a5bbc9f13f7e2369a3c
  main2 :: GHC.Base.String
  {- Unfolding: (case GHC.ST.runSTRep
                        @ ([Types.Parser.Types.Sentence],
                           Text.Earley.Internal.Report GHC.Base.String [GHC.Base.String])
                        Main.main4 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (GHC.Show.showList__
                      @ Types.Parser.Types.Sentence
                      Types.Parser.Types.$fShowSentence1
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (case ww2 of ww4 { Text.Earley.Internal.Report ww3 ww5 ww6 ->
                             Text.Earley.Internal.$w$cshowsPrec
                               @ [GHC.Types.Char]
                               @ [GHC.Base.String]
                               GHC.Show.$fShow[]_$s$fShow[]1
                               GHC.Show.$fShow[]_$s$fShow[]2
                               0
                               ww3
                               ww5
                               ww6 })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            Main.main3))) }) -}
db42ef56b9c31eff980e482f80d170b8
  main3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4759eac71a51f8adf5c40cc1a8cbaaf0
  main4 ::
    GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          ([Types.Parser.Types.Sentence],
           Text.Earley.Internal.Report GHC.Base.String [GHC.Base.String]) #)
  {- Arity: 1,
     Unfolding: (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                 case (Text.Earley.Grammar.runGrammar
                         @ (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
                         @ (Text.Earley.Internal.ProdR
                              s
                              Types.Parser.Types.Sentence
                              GHC.Base.String
                              GHC.Base.String
                              Types.Parser.Types.Sentence)
                         @ (GHC.ST.ST s)
                         (Main.main12 @ s)
                         (Main.main10 @ s)
                           `cast`
                         (forall e1 t1 a5.
                          <Text.Earley.Grammar.Prod
                             (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
                             e1
                             t1
                             a5>_R
                          ->_R Sym (GHC.ST.NTCo:ST[0]
                                        <s>_N
                                        <Text.Earley.Grammar.Prod
                                           (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)
                                           e1
                                           t1
                                           a5>_R))
                         (Recognizer.sentence
                            @ (Text.Earley.Internal.Rule s Types.Parser.Types.Sentence)))
                        `cast`
                      (GHC.ST.NTCo:ST[0]
                           <s>_N
                           <Text.Earley.Internal.ProdR
                              s
                              Types.Parser.Types.Sentence
                              GHC.Base.String
                              GHC.Base.String
                              Types.Parser.Types.Sentence>_R)
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMutVar#
                        @ [Text.Earley.Internal.Cont
                             s
                             Types.Parser.Types.Sentence
                             GHC.Base.String
                             GHC.Base.String
                             Types.Parser.Types.Sentence
                             Types.Parser.Types.Sentence]
                        @ s
                        (Main.main8 @ s)
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newMutVar#
                        @ (GHC.Base.Maybe
                             (GHC.STRef.STRef
                                s (Text.Earley.Internal.Results s Types.Parser.Types.Sentence)))
                        @ s
                        (GHC.Base.Nothing
                           @ (GHC.STRef.STRef
                                s (Text.Earley.Internal.Results s Types.Parser.Types.Sentence)))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Data.OldList.words Main.main7 of dt1 { DEFAULT ->
                 case Text.Earley.Internal.$wa2
                        @ s
                        @ Types.Parser.Types.Sentence
                        @ GHC.Base.String
                        @ GHC.Base.String
                        @ [GHC.Base.String]
                        Main.$s$fListLike[]a
                        (GHC.Types.:
                           @ (Text.Earley.Internal.State
                                s
                                Types.Parser.Types.Sentence
                                GHC.Base.String
                                GHC.Base.String
                                Types.Parser.Types.Sentence)
                           (case ipv1 of dt2 { DEFAULT ->
                            Text.Earley.Internal.State
                              @ s
                              @ Types.Parser.Types.Sentence
                              @ GHC.Base.String
                              @ GHC.Base.String
                              @ Types.Parser.Types.Sentence
                              @ Types.Parser.Types.Sentence
                              @ Types.Parser.Types.Sentence
                              dt2
                              (Text.Earley.Internal.$fApplicativeResults5
                                 @ s
                                 @ Types.Parser.Types.Sentence)
                                `cast`
                              (<Types.Parser.Types.Sentence>_R
                               ->_R Sym (Text.Earley.Internal.NTCo:Results[0]
                                             <s>_N <Types.Parser.Types.Sentence>_R))
                              Text.Earley.Internal.Previous
                              ipv3
                              ipv5 })
                           (GHC.Types.[]
                              @ (Text.Earley.Internal.State
                                   s
                                   Types.Parser.Types.Sentence
                                   GHC.Base.String
                                   GHC.Base.String
                                   Types.Parser.Types.Sentence)))
                        (GHC.Types.[] @ (GHC.ST.ST s [Types.Parser.Types.Sentence]))
                        (GHC.Types.[]
                           @ (Text.Earley.Internal.State
                                s
                                Types.Parser.Types.Sentence
                                GHC.Base.String
                                GHC.Base.String
                                Types.Parser.Types.Sentence))
                        (Main.main6 @ s) `cast` (Sym (GHC.ST.NTCo:ST[0] <s>_N <()>_R))
                        (GHC.Types.[] @ GHC.Base.String)
                        0
                        dt1
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 Main.main5
                   @ s
                   @ GHC.Base.String
                   @ [GHC.Base.String]
                   @ Types.Parser.Types.Sentence
                   @ GHC.Base.String
                   Main.$s$fListLike[]a
                   ipv7
                   ipv6 } } } } }) -}
a59a97b2aa9f64826cf7ce1ca7764f64
  main5 ::
    Data.ListLike.Base.ListLike i2 t1 =>
    Text.Earley.Internal.Result s e1 i2 a5
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          ([a5], Text.Earley.Internal.Report e1 i2) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U> -}
a59fb3cb5f1e41cca969f16a144daea5
  main6 :: GHC.Prim.State# s -> (# GHC.Prim.State# s, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ s s2 :: GHC.Prim.State# s[OneShot] ->
                 (# s2, GHC.Tuple.() #)) -}
fafa74bc11fae1338ca9ba42753585cf
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "plant the pot plant in the plant pot"#) -}
934bfa3c6e638f80a95d3a5430cf8244
  main8 ::
    [Text.Earley.Internal.Cont
       s
       Types.Parser.Types.Sentence
       GHC.Base.String
       GHC.Base.String
       Types.Parser.Types.Sentence
       Types.Parser.Types.Sentence]
  {- Unfolding: (\ @ s ->
                 GHC.Types.:
                   @ (Text.Earley.Internal.Cont
                        s
                        Types.Parser.Types.Sentence
                        GHC.Base.String
                        GHC.Base.String
                        Types.Parser.Types.Sentence
                        Types.Parser.Types.Sentence)
                   (Main.main9 @ s)
                   (GHC.Types.[]
                      @ (Text.Earley.Internal.Cont
                           s
                           Types.Parser.Types.Sentence
                           GHC.Base.String
                           GHC.Base.String
                           Types.Parser.Types.Sentence
                           Types.Parser.Types.Sentence))) -}
a6c2d421da1d41f13fa5074397b6908b
  main9 ::
    Text.Earley.Internal.Cont
      s
      Types.Parser.Types.Sentence
      GHC.Base.String
      GHC.Base.String
      Types.Parser.Types.Sentence
      Types.Parser.Types.Sentence
  {- Unfolding: (\ @ s ->
                 Text.Earley.Internal.FinalCont
                   @ s
                   @ Types.Parser.Types.Sentence
                   @ GHC.Base.String
                   @ GHC.Base.String
                   @ Types.Parser.Types.Sentence
                   @ Types.Parser.Types.Sentence
                   (Text.Earley.Internal.$fApplicativeResults5
                      @ s
                      @ Types.Parser.Types.Sentence)
                     `cast`
                   (<Types.Parser.Types.Sentence>_R
                    ->_R Sym (Text.Earley.Internal.NTCo:Results[0]
                                  <s>_N <Types.Parser.Types.Sentence>_R))) -}
"SPEC/Main $fListLike[]a @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                     [[GHC.Types.Char]]
                                                                     [GHC.Types.Char]
                                                   $dMonoid :: GHC.Base.Monoid [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a @ [GHC.Types.Char]
                                   $dFoldableLL
                                   $dMonoid
  = Main.$s$fListLike[]a
"SPEC/Main $fListLike[]a_$cappend @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                              [[GHC.Types.Char]]
                                                                              [GHC.Types.Char]
                                                            $dMonoid :: GHC.Base.Monoid
                                                                          [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cappend @ [GHC.Types.Char]
                                            $dFoldableLL
                                            $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cappend
"SPEC/Main $fListLike[]a_$cbreak @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                             [[GHC.Types.Char]]
                                                                             [GHC.Types.Char]
                                                           $dMonoid :: GHC.Base.Monoid
                                                                         [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cbreak @ [GHC.Types.Char]
                                           $dFoldableLL
                                           $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cbreak
"SPEC/Main $fListLike[]a_$cconcatMap @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cconcatMap @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cconcatMap
"SPEC/Main $fListLike[]a_$ccons @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$ccons @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$ccons
"SPEC/Main $fListLike[]a_$cdrop @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cdrop @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cdrop
"SPEC/Main $fListLike[]a_$cdropWhile @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cdropWhile @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cdropWhile
"SPEC/Main $fListLike[]a_$cempty @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                             [[GHC.Types.Char]]
                                                                             [GHC.Types.Char]
                                                           $dMonoid :: GHC.Base.Monoid
                                                                         [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cempty @ [GHC.Types.Char]
                                           $dFoldableLL
                                           $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cempty
"SPEC/Main $fListLike[]a_$cfilter @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                              [[GHC.Types.Char]]
                                                                              [GHC.Types.Char]
                                                            $dMonoid :: GHC.Base.Monoid
                                                                          [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cfilter @ [GHC.Types.Char]
                                            $dFoldableLL
                                            $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cfilter
"SPEC/Main $fListLike[]a_$cfind @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cfind @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cfind
"SPEC/Main $fListLike[]a_$cfindIndex @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cfindIndex @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cfindIndex
"SPEC/Main $fListLike[]a_$cgenericLength @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                     [[GHC.Types.Char]]
                                                                                     [GHC.Types.Char]
                                                                   $dMonoid :: GHC.Base.Monoid
                                                                                 [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cgenericLength @ [GHC.Types.Char]
                                                   $dFoldableLL
                                                   $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cgenericLength
"SPEC/Main $fListLike[]a_$chead @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$chead @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$chead
"SPEC/Main $fListLike[]a_$cindex @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                             [[GHC.Types.Char]]
                                                                             [GHC.Types.Char]
                                                           $dMonoid :: GHC.Base.Monoid
                                                                         [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cindex @ [GHC.Types.Char]
                                           $dFoldableLL
                                           $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cindex
"SPEC/Main $fListLike[]a_$cinit @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cinit @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cinit
"SPEC/Main $fListLike[]a_$cintersectBy @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                   [[GHC.Types.Char]]
                                                                                   [GHC.Types.Char]
                                                                 $dMonoid :: GHC.Base.Monoid
                                                                               [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cintersectBy @ [GHC.Types.Char]
                                                 $dFoldableLL
                                                 $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cintersectBy
"SPEC/Main $fListLike[]a_$cintersperse @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                   [[GHC.Types.Char]]
                                                                                   [GHC.Types.Char]
                                                                 $dMonoid :: GHC.Base.Monoid
                                                                               [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cintersperse @ [GHC.Types.Char]
                                                 $dFoldableLL
                                                 $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cintersperse
"SPEC/Main $fListLike[]a_$clast @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$clast @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$clast
"SPEC/Main $fListLike[]a_$cnull @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cnull @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cnull
"SPEC/Main $fListLike[]a_$cpartition @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cpartition @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cpartition
"SPEC/Main $fListLike[]a_$creplicate @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$creplicate @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$creplicate
"SPEC/Main $fListLike[]a_$creverse @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                               [[GHC.Types.Char]]
                                                                               [GHC.Types.Char]
                                                             $dMonoid :: GHC.Base.Monoid
                                                                           [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$creverse @ [GHC.Types.Char]
                                             $dFoldableLL
                                             $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$creverse
"SPEC/Main $fListLike[]a_$crigidConcatMap @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                      [[GHC.Types.Char]]
                                                                                      [GHC.Types.Char]
                                                                    $dMonoid :: GHC.Base.Monoid
                                                                                  [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$crigidConcatMap @ [GHC.Types.Char]
                                                    $dFoldableLL
                                                    $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$crigidConcatMap
"SPEC/Main $fListLike[]a_$crigidMap @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                [[GHC.Types.Char]]
                                                                                [GHC.Types.Char]
                                                              $dMonoid :: GHC.Base.Monoid
                                                                            [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$crigidMap @ [GHC.Types.Char]
                                              $dFoldableLL
                                              $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$crigidMap
"SPEC/Main $fListLike[]a_$csortBy @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                              [[GHC.Types.Char]]
                                                                              [GHC.Types.Char]
                                                            $dMonoid :: GHC.Base.Monoid
                                                                          [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$csortBy @ [GHC.Types.Char]
                                            $dFoldableLL
                                            $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$csortBy
"SPEC/Main $fListLike[]a_$cspan @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cspan @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cspan
"SPEC/Main $fListLike[]a_$csplitAt @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                               [[GHC.Types.Char]]
                                                                               [GHC.Types.Char]
                                                             $dMonoid :: GHC.Base.Monoid
                                                                           [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$csplitAt @ [GHC.Types.Char]
                                             $dFoldableLL
                                             $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$csplitAt
"SPEC/Main $fListLike[]a_$ctail @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                            [[GHC.Types.Char]]
                                                                            [GHC.Types.Char]
                                                          $dMonoid :: GHC.Base.Monoid
                                                                        [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$ctail @ [GHC.Types.Char]
                                          $dFoldableLL
                                          $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$ctail
"SPEC/Main $fListLike[]a_$ctakeWhile @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                                 [[GHC.Types.Char]]
                                                                                 [GHC.Types.Char]
                                                               $dMonoid :: GHC.Base.Monoid
                                                                             [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$ctakeWhile @ [GHC.Types.Char]
                                               $dFoldableLL
                                               $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$ctakeWhile
"SPEC/Main $fListLike[]a_$cunionBy @ [Char]" [ALWAYS] forall $dFoldableLL :: Data.ListLike.FoldableLL.FoldableLL
                                                                               [[GHC.Types.Char]]
                                                                               [GHC.Types.Char]
                                                             $dMonoid :: GHC.Base.Monoid
                                                                           [[GHC.Types.Char]]
  Data.ListLike.Base.$fListLike[]a_$cunionBy @ [GHC.Types.Char]
                                             $dFoldableLL
                                             $dMonoid
  = Main.$s$fListLike[]a_$s$fListLike[]a_$cunionBy
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

